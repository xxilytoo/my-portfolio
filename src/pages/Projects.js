import React from 'react';
import '../styles/Projects.css'; 
import Project from '../components/Project';
import proj1img from '../images/cattle-proj.png';
import songpop from '../images/songprediction.png';
import ccimg from '../images/cc-research.png';
import ssgame from '../images/SymptomSmashWebScreen.png';
import cssgame from '../images/carcassonnewebscreenshot.jpg';
import evamusic from '../images/EvaMusic.png';
import stemedu from '../images/stemedu.jpg';

const projectList = [
  {
    title: 'Cattle Detection Pro',
    description: 'Streamlit-based application utilizing a fine-tuned YOLOv11 model for efficient cattle detection in aerial images and videos. Note: Streamlit might take a while to become up and running from asleep',
    tech: 'Technologies/Libraries Utilized: Python, Ultralytics, Roboflow, Streamlit, Sort, cv2.',
    link: 'https://cattledetectionpro.streamlit.app/',
    link2: 'https://github.com/xxilytoo/cattle_graze_model',
    image: proj1img
  },
  {
    title: 'EvaLaMusica',
    description: 'Full-stack web application that generates personalized playlists based on user input for mood and environment. The playlist is generated by a Convulutional Neural Network trained from scratch',
    tech: 'Technologies/Libraries Utilized: HTML, CSS, Bootstrap, RestAPI, Flask, PostgresSQL (Incoming), Python, Tensorflow, nltk, keras, sklearn, pandas, matplotlib ',
    link: 'https://docs.google.com/presentation/d/1prGpw3YBgJt6wWwnotR1zSXNGd7Ay-wqGUvHwHz0ZE8/edit?usp=sharing',
    link2: 'https://github.com/xxilytoo/IgniteAI-Song-Recommendation-Project',
    image:evamusic
  },
  {
    title: 'Song Popularity Predictor',
    description: 'Developed a K-Nearest Neighbor GridsearchCV machine learning model to predict song popularity based on song intros and pulled data from Spotify API',
    tech: 'Technologies/Libraries Utilized: Python, sklearn, matplotlib, pandas, numpy, spotipy',
    link: 'https://github.com/xxilytoo/Song-Prediction/tree/main',
    image: songpop
  },
  {
    title: 'Viva Stemedu',
    description: 'Fullstack web application featuring clickable STEM options and a search bar for discovering learning activities, leading to detailed, child-friendly material that inspires lifelong dreams and world-changing potential.',
    tech: 'Technologies/Libraries Utilized: HTML, CSS, Javascript, Bootstrap, Axios, Brave API',
    link: 'https://devpost.com/software/stemedu',
    link2: 'https://github.com/DanielC12321/TAMUHACKX/tree/main',
    image: stemedu
  },
  {
    title: 'Symptom Smash',
    description: "Engaging health education application which teaches health conditions based on the user's current health",
    tech: 'Technologies/Libraries Utilized: Unity, C#',
    link: 'https://docs.google.com/document/d/1DNo_xjFXZ-F637sQtV_45hRZI_YruYV29HFXmehKAhw/edit?tab=t.0',
    link2: 'https://drive.google.com/drive/folders/1n9uroEJUdxmN5fTaL16zQ5O4DNiFSXrp',
    image: ssgame
  },
  {
    title: 'Cloud Cost Reduction Research',
    description: 'Developed and implemented a groundbreaking Waterfall Algorithm using machine learning models on Microsoft Azure Virtual Machine data, projected to save $15 million across 66,721 virtual machines, with findings published in the Journal of Student Research.',
    tech: 'Technologies/Libraries Utilized: Java, Python, Orange',
    link: 'https://www.jsr.org/hs/index.php/path/article/view/3362',
    link2: 'https://github.com/xxilytoo/CloudComputingCostReduction',
    image: ccimg
  },
  {
    title: 'Caracassonne',
    description: 'Developed a Java-based project inspired by the board game Carcassonne, featuring a tile-placement strategy where players build cities, roads, and fields to earn points.',
    tech: 'Technologies/Libraries/Skills Utilized: Java, Java Swing & AWT, Objected Oriented Programming',
    link: 'https://github.com/xxilytoo/CaracssonneProjectDS',
    image: cssgame
  },
];

const Projects = () => {
  return (
    <section id="projects" className="projects-section">
      <h2>My Projects</h2>
      <div className="project-list">
        {projectList.map((project, index) => (
          <Project
            key={index}
            title={project.title}
            image={project.image}
            description={project.description}
            tech={project.tech}
            link={project.link}
            link2={project.link2}
          />
        ))}
      </div>
    </section>
  );
};

export default Projects;
